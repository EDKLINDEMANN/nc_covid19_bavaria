NULL))
debugonce(plot_Germany)
plot_Germany(plot_data_german[plot_data_german$piece==1,],
plot_type = ifelse(input$selPlot_ger == "Relative Fallzahlen", "relative", "absolute"),
upper_limit = ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
NULL))
debugonce(plot_Germany)
plot_Germany(plot_data_german[plot_data_german$piece==1,],
plot_type = ifelse(input$selPlot_ger == "Relative Fallzahlen", "relative", "absolute"),
upper_limit = ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
NULL))
plot_type
upper_limit
input$selPlot_ger
warnings()
upper_limit
max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd)
ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
NULL)
ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
1)
ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
c(NULL))
ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
eval(NULL))
ifelse(input$selPlot_ger == "Relative Fallzahlen", max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd),
return(NULL))
if (input$selPlot_ger == "Relative Fallzahlen"){ max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd) } else{return(NULL)}
return(NULL)
NULL
if (input$selPlot_ger == "Relative Fallzahlen"){ max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd) } else{NULL}
plot_Germany(plot_data_german[plot_data_german$piece==1,],
plot_type = ifelse(input$selPlot_ger == "Relative Fallzahlen", "relative", "absolute"),
upper_limit = if (input$selPlot_ger == "Relative Fallzahlen") {
max(plot_data_german[plot_data_german$piece==1,]$cases_per_100tsd)
} else {NULL})
plot_global
runApp('Documents/corona/shinyApp')
runApp('Documents/corona/shinyApp')
devtools::install_local("../guentherf/Documents/corona/CoronaMaps/", force = T)
shiny::runApp('Documents/corona/shinyApp')
plot_data_german = readRDS("../guentherf/Documents/corona/data/plot_data_German.rds")
plotGermany(plot_data_german)
library(CoronaMaps)
plotGermany(plot_data_german)
plot_Germany(plot_data_german)
debugonce(plot_Germany)
#' Visualization of Corona infections per 100.000 inhabitants by German federal state.
#'
#' This function visualizes the number of Corona infections per 100.000
#' inhabitants for each German federal state
#' @inheritParams plot_global
#' @param data data.frame containing number of Corona infections per 100.000
#' inhabitants by federal state and polygon information for spatial plotting.
#' Prepared with \code{\link{prepare_GermanMapData}}.
#' @import checkmate dplyr ggplot2
#' @export
plot_Germany <- function(data, plot_type = "relative", upper_limit = NULL) {
checkmate::assert_data_frame(data)
checkmate::assert_choice(plot_type, choices = c("absolute","relative"))
checkmate::assert_numeric(upper_limit, len = 1, null.ok = TRUE)
if (plot_type == "absolute") {
if (is.null(upper_limit)) {
upper_limit <- max(data$cases)
} else {
data <- data %>%
mutate(cases = ifelse(test = cases > upper_limit,
yes = upper_limit, no = cases))
}
legend_title <- "Number of cases"
} else { # response type "relative"
if (is.null(upper_limit)) {
upper_limit <- max(data$cases_per_100tsd)
} else {
data <- data %>%
mutate(cases_per_100tsd = ifelse(test = cases_per_100tsd > upper_limit,
yes = upper_limit, no = cases_per_100tsd))
}
legend_title <- "Total Cases\nper 100.000"
}
# ggplot theme:
theme <- theme_classic() +
theme(text = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
strip.text.y = element_text(size = 12), legend.text.align = 0,
strip.placement = "outside", strip.background = element_blank(),
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),)
# Graphical visualization:
gg <- ggplot(data = data)
if (plot_type == "absolute") {
gg <- gg +
geom_polygon(aes(x = long, y = lat, group = group, fill = cases  + 1), col = "white") +
geom_polygon(aes(x = long, y = lat, group = group, fill = cases  + 1), col = "white", data = data[data$state%in%c("Berlin", "Bremen"),])
} else { # plot_type "relative"
gg <- gg +
geom_polygon(aes(x = long, y = lat, group = group, fill = cases_per_100tsd + 1), col = "azure1") +
geom_polygon(aes(x = long, y = lat, group = group, fill = cases_per_100tsd  + 1), col = "white", data = data[data$state%in%c("Berlin", "Bremen"),])
}
gg + scale_fill_gradient(legend_title,
low = "azure2", high = "brown2", trans = "log2",
breaks = floor(2^(seq(0,log2(floor(upper_limit)+1), length.out = 6))),
labels = floor(2^(seq(0,log2(floor(upper_limit)+1), length.out = 6)))-1) +
labs(title = paste0("Coronavirus Situation ", Sys.Date(), ": Germany"),
caption = "Population Estimates: Destatis 2019,\nCase numbers: Robert-Koch-Institut") +
theme
}
plot_Germany(plot_data_german)
library(ggplot2)
plot_Germany(plot_data_german)
devtools::install_local("../guentherf/Documents/corona/CoronaMaps/", force = T)
getwD()
library(devtools)
install_local("./Documents/corona/CoronaMaps/", force = TRUE)
library(CoronaMaps)
plot_Germany_lineplot()
plot_Germany_lineplot
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative")
target_file <- paste0("cases_GermanTemporal_", Sys.Date())
cases_german_temporal   <- scrape_GermanCasesTemporal(target_file = "cases_German.rds")
population_german       <- scrape_GermanPopulation(target_file = "population_German.rds")
cases_german_aggregated <- prepare_german_temporal(cases_german_temporal, population_german,
target_file = "cases_german_aggregated.rds")
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative")
max_update_hopkins = "test"
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative")
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative")
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative") +  geom_dl(aes(label=state, colour=state), list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
library(ggplot2)
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative") +  geom_dl(aes(label=state, colour=state), list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
install.packages("directlabels")
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative") +  geom_dl(aes(label=state, colour=state), list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
library(directlabels)
plot_Germany_lineplot(data = cases_german_aggregated, plot_type = "relative") +  geom_dl(aes(label=state, colour=state), list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
data = cases_german_aggregated
# Preprocessing:
data_plot <- data %>%
mutate(
log.cum.cases            =  ifelse(log2(cum.cases) == -Inf, 0, log(cum.cases)),
log.cum.cases.per.100tsd =  log2(100000*cum.cases/population))
library(dplyr)
# Preprocessing:
data_plot <- data %>%
mutate(
log.cum.cases            =  ifelse(log2(cum.cases) == -Inf, 0, log(cum.cases)),
log.cum.cases.per.100tsd =  log2(100000*cum.cases/population))
# determine the upper limit and lower limit of x axis:
x_axis_start <- sort(data$date, decreasing = F)[1]
last_date <- sort(data$date, decreasing = T)[1]
library(lubridate)
stretch_last_date <- as.Date(last_date) %m+% days(10)
x_axis_end <- as.POSIXct(stretch_last_date)
# Set Colors for each line:
cols <- c("Baden-Württemberg" = "#1B9E77",
"Bayern" = "#1F78B4",
"Berlin" = "#7570B3",
"Brandenburg" = "#E7298A",
"Bremen" = "#E6AB02",
"Hamburg" = "#A6761D",
"Hessen" = "#666666",
"Mecklenburg-Vorpommern" = "#D95F02",
"Niedersachsen" = "#FB9A99",
"Nordrhein-Westfalen" = "#FF7F00",
"Rheinland-Pfalz" = "#8C510A",
"Saarland" = "#01665E",
"Sachsen" = "#C51B7D",
"Sachsen-Anhalt" = "#6A3D9A",
"Schleswig-Holstein" = "#E41A1C",
"Thüringen" = "#999999")
# ggplot theme:
theme <- theme_classic() +
theme(text = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
strip.text.y = element_text(size = 12), legend.text.align = 0,
strip.placement = "outside", strip.background = element_blank(),
legend.position = "none",
plot.margin = unit(c(5.5,5.5,5.5,5.5), "pt"))
ggplot(data_plot, aes(x=date, y=log.cum.cases.per.100tsd, col = state)) +
geom_line(size = 0.8)
ggplot(mydf, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show_guide = FALSE)
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show_guide = FALSE)
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show_legend = FALSE)
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE)
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), method = list('last.bumpup', cex = 1.3, hjust = 1)) +
scale_colour_discrete(guide="none")
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), method = list('last.bumpup', cex = 1.3, hjust = 0)) +
scale_colour_discrete(guide="none")
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), method = list('last.bumpup', cex = 1.3, hjust = 0)) +
scale_colour_discrete(guide="none") + theme(legend.key = element_rect(colour = "white"))
?geom_dl
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), method = list('last.qp', cex = 1.3, hjust = 0)) +
scale_colour_discrete(guide="none") + theme(legend.key = element_rect(colour = "white"))
ggplot(data_plot, aes(y=log.cum.cases.per.100tsd, x=date, group=state)) +
geom_line(aes(group=state, colour=state), show.legend = FALSE) + geom_dl(aes(label=state, colour=state), method = list('top.qp', cex = 1.3, hjust = 0)) +
scale_colour_discrete(guide="none") + theme(legend.key = element_rect(colour = "white"))
shiny::runApp('Documents/corona/shinyApp')
runApp('Documents/corona/shinyApp')
runApp('Documents/corona/shinyApp')
runApp('Documents/corona/shinyApp')
library(devtools)
devtools::document("./Documents/corona/CoronaMaps/")
#' Visualization of Cumulative Corona infections on German Bundesland level.
#'
#' This function visualizes the cumulated Corona infections in each Bundesland in Germany
#' inhabitants for each German federal state
#' @inheritParams plot_global
#' @param data data.frame containing number of Corona infections per 100.000
#' inhabitants by federal state and polygon information for spatial plotting.
#' Prepared with \code{\link{prepare_GermanMapData}}.
#' @import checkmate dplyr ggplot2 ggrepel scales
#' @export
plot_Germany_lineplot <- function(data, cumulative = TRUE,
title = paste0("Coronavirus Germany -\n Cases Per 100.000 \n(Data updated: ",
max_update_hopkins, ")"),
max_ylim = 100) {
checkmate::assert_data_frame(data)
checkmate::assert_choice(cumulative, choices = c(TRUE, FALSE))
# Preprocessing:
data_plot <- data %>%
mutate(
cases = replace(cases, (state == "Hamburg" & date == as.POSIXct("2020-03-25 01:00:00 CET")), 213),#https://www.hamburg.de/coronavirus/
cases.per.100tsd         =  100000*cases/population,
cum.cases.per.100tsd     =  100000*cum.cases/population) %>%
mutate(cases.per.100tsd = ifelse(cases.per.100tsd == 0,
2^floor(log2(min(cases.per.100tsd[cases.per.100tsd>0], na.rm = TRUE))),
cases.per.100tsd))
# determine the upper limit and lower limit of x axis:
x_axis_start <- min(data$date)
last_date <- max(data$date)
library(lubridate)
stretch_last_date <- as.Date(last_date) %m+% days(6)
x_axis_end <- as.POSIXct(stretch_last_date)
# Set Colors for each line:
cols <- c("Baden-Württemberg" = "#1B9E77",
"Bayern" = "#1F78B4",
"Berlin" = "#7570B3",
"Brandenburg" = "#E7298A",
"Bremen" = "#E6AB02",
"Hamburg" = "#A6761D",
"Hessen" = "#666666",
"Mecklenburg-Vorpommern" = "#D95F02",
"Niedersachsen" = "#FB9A99",
"Nordrhein-Westfalen" = "#FF7F00",
"Rheinland-Pfalz" = "#8C510A",
"Saarland" = "#01665E",
"Sachsen" = "#C51B7D",
"Sachsen-Anhalt" = "#6A3D9A",
"Schleswig-Holstein" = "#E41A1C",
"Thüringen" = "#999999")
# ggplot theme:
theme <- theme_classic() +
theme(text = element_text(size = 12),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
strip.text.y = element_text(size = 12), legend.text.align = 0,
strip.placement = "outside", strip.background = element_blank(),
legend.position = "none",
plot.margin = unit(c(5.5,5.5,5.5,5.5), "pt"))
if(cumulative == TRUE) {
# Graphical visualization: Cumulative Cases Relative
# ggplot scaling system:
anteile     <- c(0.1, 0.2, 0.5, 1, 2^(1:ceiling(log2(max_ylim))))
gg <- ggplot(data_plot, aes(x=date, y=cum.cases.per.100tsd, col = state)) +
geom_line(size = 0.8) +
geom_text_repel(
data = subset(data_plot, date == last_date),
aes(label = state, colour = state, x = date, y = cum.cases.per.100tsd),
size = 4,
hjust = -.1, # Horizontal distance from plot
direction = "y",
nudge_x = 5,
segment.color = NA,
show.legend = FALSE,
force = 0.0015 # Vertical distance between the labels
)+
labs(title = title,
caption = "Population Estimates: Destatis 2019\nCase numbers: Robert-Koch-Institut\nVisualization: Statistical Consulting Unit StaBLab, LMU Munich") +
theme +
xlab("") +
ylab("Registered Cumulative Cases per 100.000") +
scale_colour_manual(values = cols) +
scale_y_continuous(trans = "log2",
breaks = anteile,
labels = anteile,
limits = c(0.09, NA)) +
scale_x_datetime( breaks=seq(as.POSIXct("2020-02-22 01:00:00 CET"), x_axis_end, "7 days"),
labels = date_format("%d \n%b",  tz="CET"),
limits = c(as.POSIXct("2020-02-22 01:00:00 CET"),x_axis_end)) +
geom_ribbon(aes(ymin = 0.0, ymax = 0.11),
fill = "white", colour = "white")
suppressWarnings(print(gg))
} else {
# Graphical visualization: New Cases Relative
# ggplot scaling system:
y_tick <- c(min(data_plot$cases.per.100tsd, na.rm=TRUE),
2^(ceiling(log2(sort(unique(data_plot$cases.per.100tsd))[2])):ceiling(log2(max_ylim)))
gg <- ggplot(data_plot, aes(x=date, y=cases.per.100tsd, col = state)) +
geom_line(size = 0.8) +
geom_text_repel(
data = subset(data_plot, date == last_date),
aes(label = state, colour = state, x = date, y = cases.per.100tsd),
size = 4,
hjust = -.1, # Horizontal distance from plot
direction = "y",
nudge_x = 5,
segment.color = NA,
show.legend = FALSE,
force = 0.0015 # Vertical distance between the labels
)+
labs(title = title,
caption = "Population Estimates: Destatis 2019\nCase numbers: Robert-Koch-Institut\nVisualization: Statistical Consulting Unit StaBLab, LMU Munich") +
theme +
xlab("") +
ylab("Daily Registered New Cases per 100.000") +
scale_colour_manual(values = cols) +
scale_y_continuous(trans = "log2",
breaks = y_tick,
labels = c(0,ifelse(y_tick[-1]<0.125,
parse(text = paste0("2^", log2(y_tick[-1]))),
y_tick[-1]))) +
scale_x_datetime( breaks=seq(as.POSIXct("2020-02-22 01:00:00 CET"), x_axis_end, "7 days"),
labels = date_format("%d \n%b",  tz="CET"),
limits = c(as.POSIXct("2020-02-22 01:00:00 CET"),x_axis_end))
suppressWarnings(print(gg))
}
}
devtools::document("./Documents/corona/CoronaMaps/")
devtools::install_local("./Documents/corona/CoronaMaps/")
devtools::install_local("./Documents/corona/CoronaMaps/", force = TRUE)
runApp('Documents/corona/shinyApp')
1656 - 228
1+1
shiny::runApp('Documents/corona/shinyApp')
devtools::install_local("./Documents/corona/CoronaMaps/", force = TRUE)
setwd("~/Documents/nc_covid19_bavaria/code_public")
library(tidyverse)
library(surveillance)
library(lubridate)
source("./analysis_fun.R")
# Read data
dat = read_tsv("../data_public/data_public.csv")
# Edit data set
dat_edit = dat %>% mutate(rep_date_weekday = weekdays(rep_date),
rep_week = as.numeric(strftime(rep_date, format = "%V")),
delay = as.numeric(rep_date - disease_start))
# Summarise available delay data
dat_sum = summarize_data(dat_edit)
dat_sum
# Impute data based on Weibull GAMLSS
imputation_res = perform_imputation(dat_edit = dat_edit,
type = "week_weekday_age")
# Plot imputation_results
# Figure 1
imputation_res[[3]]
# Get imputated data
imputed_data = imputation_res[[1]]
# Estimate Nowcasts
# Define current date
data_date = ymd("2020-04-09")
# Compute nowcasts (requires working rjags installation on device),
# Results and diagnostic plots can automatically be safed (see documentation in './analysis_fun.R')
nc_res = estimate_nowcasts(imputed_data = imputed_data,
data_date = data_date,
safePredictLag = 2,
save_results = FALSE)
debugonce(estimate_nowcasts)
# Compute nowcasts (requires working rjags installation on device),
# Results and diagnostic plots can automatically be safed (see documentation in './analysis_fun.R')
nc_res = estimate_nowcasts(imputed_data = imputed_data,
data_date = data_date,
safePredictLag = 2,
save_results = FALSE)
tidy_nc(nc_lawless, nowcastDates = nowcastDates) %>%
mutate(type = "lawless")
debugonce(tidy_nc)
tidy_nc(nc_lawless, nowcastDates = nowcastDates) %>%
mutate(type = "lawless")
?tidy()
library(tidyverse)
library(surveillance)
library(lubridate)
library(broom)
source("./analysis_fun.R")
# Read data
dat = read_tsv("../data_public/data_public.csv")
# Edit data set
dat_edit = dat %>% mutate(rep_date_weekday = weekdays(rep_date),
rep_week = as.numeric(strftime(rep_date, format = "%V")),
delay = as.numeric(rep_date - disease_start))
# Summarise available delay data
dat_sum = summarize_data(dat_edit)
# Impute data based on Weibull GAMLSS
imputation_res = perform_imputation(dat_edit = dat_edit,
type = "week_weekday_age")
# Plot imputation_results
# Figure 1
imputation_res[[3]]
# Get imputated data
imputed_data = imputation_res[[1]]
# Estimate Nowcasts
# Define current date
data_date = ymd("2020-04-09")
# Compute nowcasts (requires working rjags installation on device),
# Results and diagnostic plots can automatically be safed (see documentation in './analysis_fun.R')
nc_res = estimate_nowcasts(imputed_data = imputed_data,
data_date = data_date,
safePredictLag = 2,
save_results = FALSE)
# Plot Nowcasts results
# Fig 2
nc_res[[4]]
# Fig 3
nc_res[[5]]
## Estimation R0
library(R0)
library(EpiEstim)
nc_info <- nc_res$add_inf
# Extract nowcast object
nc <- nc_res$nc_obj$nc_bayes_tps_wd
# Generation time from Nishiura et al. (2020)
gt_ni <- c(mean = 4.70, sd = 2.90)
gt <- R0::generation.time("lognormal", gt_ni)
set.seed(131015)
source("general/est.R0.TD.R") # customized version of R0::est.R0.TD
source("./general/functions-R0.R")
# extract nowcast dates
now <- nc_info$now - nc_info$safePredictLag
#Time the 2nd case - could remove imported cases more explictly
time_2ndcase <- epoch(nc)[min(which(cumsum(observed(nc)) >= 2))]
#Number of days of the serial interval to ensure
most_secondary_transmissions_occurred <- gt$time[min(which(cumsum(gt$GT)
>= 0.95))]
# End of R(t) estimation
end_Rt_estim <- now - most_secondary_transmissions_occurred + 1
# Estimate R0 using the Wallinga & Teunis method.
# sample time-series from posterior of now-cast object
# each row is one sample from posterior
posterior_samples <- sample_from_nc_posterior(nc, n_sample = 500)
library(future)
plan("multicore")
# Apply R0 estimatio to to each sampled timeseries of new daily cases
options(mc.cores = 6)
Rt_est_list <- furrr::future_map(
.x = seq_len(nrow(posterior_samples)),
.f = ~{
ts <- posterior_samples[.x,]
est.R0.TD( # use custom function that returns R.simu
epid    = ts,
GT      = gt,
t       = epoch(nc),
correct = TRUE,
begin   = time_2ndcase,
end     = end_Rt_estim,
nsim    = 10)
}
)
# Combine R0 estimates into one data frame
Rt_df <- map_dfr(
Rt_est_list,
~ tidy_Rsimu(.x, nc, time_2ndcase, end_Rt_estim), .id="posterior_sample") %>%
gather(iter, Rt, -posterior_sample, - Date)
# Aggregate over samples
Rt_df_smry <- Rt_df %>%
group_by(Date) %>%
summarize(
Rt_lower = quantile(Rt, .025),
Rt_upper = quantile(Rt, .975),
Rt = mean(Rt))
# get R(t) at most current date
last_Rt <- Rt_df_smry %>% filter(Date == max(Date))
last_Rt
# Plot R(t)
gg_Rt <- ggplot(Rt_df_smry, aes(x = Date, y = Rt)) +
geom_ribbon(aes(ymin = Rt_lower, ymax = Rt_upper), fill = "lightgray", alpha = .9) +
geom_line() +
xlab("Date") + ylab(expression(R(t))) +
geom_hline(yintercept=1, lty=2) +
scale_y_continuous(breaks=seq(0,6, by=1)) +
scale_x_date(date_breaks = "2 week") +
coord_cartesian(ylim = c(0,5))
gg_Rt
# Plot R(t)
gg_Rt <- ggplot(Rt_df_smry, aes(x = Date, y = Rt)) +
geom_ribbon(aes(ymin = Rt_lower, ymax = Rt_upper), fill = "lightgray", alpha = .9) +
geom_line() +
xlab("Date") + ylab(expression(R(t))) +
geom_hline(yintercept=1, lty=2) +
scale_y_continuous(breaks=seq(0,6, by=1)) +
scale_x_date(date_breaks = "2 week") +
coord_cartesian(ylim = c(0,5)) + theme_bw()
gg_Rt
